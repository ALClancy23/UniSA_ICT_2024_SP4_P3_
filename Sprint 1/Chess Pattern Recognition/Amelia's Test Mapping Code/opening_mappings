class TrieNode:
    def __init__(self):
        self.children = {}
        self.opening_name = None

class Trie:
    def __init__(self):
        self.root = TrieNode()
    
    def insert(self, moves, opening_name):
        node = self.root
        for move in moves:
            if move not in node.children:
                node.children[move] = TrieNode()
            node = node.children[move]
        node.opening_name = opening_name
    
    def search(self, moves):
        node = self.root
        last_opening_name = None
        for move in moves:
            if move in node.children:
                node = node.children[move]
                if node.opening_name:
                    last_opening_name = node.opening_name
            else:
                break
        return last_opening_name

def load_openings():
    a=pd.read_csv('a.tsv', sep='\t')
    b=pd.read_csv('b.tsv', sep='\t')
    c=pd.read_csv('c.tsv', sep='\t')
    d=pd.read_csv('d.tsv', sep='\t')
    e=pd.read_csv('e.tsv', sep='\t')

    tsv_data= a,b,c,d,e

    merged_df = pd.concat(tsv_data, ignore_index=True)
    opening_moves = merged_df
    return opening_moves

def initialise_openings(opening_moves):
    trie = Trie()
    for index, row in opening_moves.iterrows():
        opening = row['name']
        plies = row['plies'].split()
        trie.insert(plies, opening)
    
    return trie

# Create and initialise the trie
opening_trie = initialise_openings()

# Function to search for an opening
def get_opening_name(moves):
    return opening_trie.search(moves)